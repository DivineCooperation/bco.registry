/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.unibi.csra.dm.view.struct;

import de.unibi.csra.dm.exception.InvalidOperationException;
import de.unibi.csra.dm.exception.NotAvailableException;
import de.unibi.csra.dm.struct.GlobalConfig;
import de.unibi.csra.dm.view.components.DataPairSelectionPanel;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author mpohling
 */
public class GlobalConfigEditorFrame extends AbstractEditorFrame<GlobalConfig> {

	private final JTextField name;
	private final DataPairSelectionPanel<String, String> instanceConfigMapping;
	private final JTextArea description;

	protected final static Map<String, GlobalConfigEditorFrame> editorInstances = new HashMap<>();

	public static synchronized void edit(final GlobalConfig globalConfig) {
		String contextKey = globalConfig.getId();
		if (!editorInstances.containsKey(contextKey)) {
			editorInstances.put(contextKey, new GlobalConfigEditorFrame());
		}
		editorInstances.get(contextKey).init(globalConfig);
	}

	/**
	 * Creates new form GlobalConfigEditorPanel
	 */
	public GlobalConfigEditorFrame() {
		this.name = new JTextField();
		this.instanceConfigMapping = new DataPairSelectionPanel<>();
		this.description = new JTextArea();
		this.instanceConfigMapping.setContextLabels("DeviceInstance", "DeviceConfig");

		addContextElement("Name", name);
		addContextElement("InstanceConfigMapping", instanceConfigMapping);
		addContextElement("Description", description);
		pack();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	@Override
	protected void load(final GlobalConfig context) {
		name.setText(context.getName());
		//TODO validate pairs!
		instanceConfigMapping.load(context.getInstanceConfigMap(), deviceManager.getDeviceInstanceMap().keySet(), deviceManager.getDeviceConfigMap().keySet());
		description.setText(context.getDescription());
	}

	@Override
	protected void save(final GlobalConfig context) throws InvalidOperationException {
		context.setName(name.getText());
		context.setDescription(description.getText());
		context.setInstanceConfigMap(instanceConfigMapping.getDataPairs());
		context.updateID();
		deviceManager.addGlobalConfig(context);
	}

	@Override
	protected boolean checkExistence(final GlobalConfig context) throws NotAvailableException {
		return deviceManager.getGlobalConfig(context.getId()) != null;
	}

	@Override
	protected void enableKeyContext(final boolean enabled) {
		name.setEnabled(enabled);
	}
}
