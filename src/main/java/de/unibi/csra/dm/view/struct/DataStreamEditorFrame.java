/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.unibi.csra.dm.view.struct;

import de.unibi.csra.dm.exception.InvalidOperationException;
import de.unibi.csra.dm.exception.NotAvailableException;
import de.unibi.csra.dm.struct.DataStream;
import de.unibi.csra.dm.view.components.DataPairTable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author mpohling
 */
public class DataStreamEditorFrame extends AbstractEditorFrame<DataStream> {

	private final JTextField name;
	private final JSpinner frequency, dataSize;
	private final JComboBox<DataStream.RST_Type> rstType;
	private final DataPairTable metaAttributeMap;
	private final JTextArea description;

	protected final static Map<String, DataStreamEditorFrame> editorInstances = new HashMap<>();

	public static synchronized void edit(final DataStream dataStream) {
		String contextKey = dataStream.getId();
		if (!editorInstances.containsKey(contextKey)) {
			editorInstances.put(contextKey, new DataStreamEditorFrame());
		}
		editorInstances.get(contextKey).init(dataStream);
	}

	/**
	 * Creates new form DataStreamEditorPanel
	 */
	public DataStreamEditorFrame() {
		this.name = new JTextField();
		this.name.setEnabled(false);
		this.frequency = new JSpinner();
		this.frequency.setModel(new SpinnerNumberModel());
		this.dataSize = new JSpinner();
		this.dataSize.setModel(new SpinnerNumberModel());
		this.rstType = new JComboBox<>();
		this.metaAttributeMap = new DataPairTable<String, String>() {

			@Override
			protected String transformKey(String context) {
				return context;
			}

			@Override
			protected String transformValue(String context) {
				return context;
			}
			
		};
		this.metaAttributeMap.setContextLabels("Key", "Value");
		this.description = new JTextArea();

		addContextElement("Name", name);
		addContextElement("DataSize", dataSize);
		addContextElement("RST-Type", rstType);
		addContextElement("Frequency", frequency);
		addContextElement("MetaAttributeMap", metaAttributeMap);
		addContextElement("Description", description);
		pack();

		frequency.addChangeListener(new ChangeListener() {

			public void stateChanged(ChangeEvent e) {
				updateNameField();
			}
		});
		dataSize.addChangeListener(new ChangeListener() {

			public void stateChanged(ChangeEvent e) {
				updateNameField();
			}
		});
		rstType.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				updateNameField();
			}
		});
	}

	private void updateNameField() {
		try {
			name.setText(DataStream.generateName((DataStream.RST_Type) rstType.getSelectedItem(), (Integer) dataSize.getValue(), (Integer) frequency.getValue()));
		} catch (Exception ex) {
			name.setText("N/A");
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	@Override
	protected void load(final DataStream context) {
		name.setText(context.getName());
		frequency.setValue(context.getFrequency());
		dataSize.setValue(context.getDataSize());
		rstType.setModel(new DefaultComboBoxModel(DataStream.RST_Type.values()));
		rstType.setSelectedItem(context.getRst_type());
		metaAttributeMap.load(context.getMetaAttributeMap());
		description.setText(context.getDescription());
	}

	@Override
	protected void save(final DataStream context) throws InvalidOperationException {
		context.setFrequency((Integer) frequency.getValue());
		context.setDataSize((Integer) dataSize.getValue());
		context.setRst_type((DataStream.RST_Type) rstType.getSelectedItem());
		context.setDescription(description.getText());
		context.setMetaAttributeMap(metaAttributeMap.getDataPairs());
		context.setName(context.generateName());
		context.updateID();
		deviceManager.addDataStream(context);
	}

	@Override
	protected boolean checkExistence(final DataStream context) throws NotAvailableException {
		return deviceManager.getDataStream(context.getId()) != null;
	}

	@Override
	protected void enableKeyContext(final boolean enabled) {
		frequency.setEnabled(enabled);
		rstType.setEnabled(enabled);
		dataSize.setEnabled(enabled);
	}
}
