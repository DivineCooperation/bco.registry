/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.unibi.csra.dm.view.struct;

import de.unibi.csra.dm.exception.InvalidOperationException;
import de.unibi.csra.dm.exception.NotAvailableException;
import de.unibi.csra.dm.struct.DeviceConfig;
import de.unibi.csra.dm.view.components.DataStreamSelectionTable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 * @author mpohling
 */
public class DeviceConfigEditorFrame extends AbstractEditorFrame<DeviceConfig> {

	private final JTextField name;
	private final JTextArea description;
	private final JComboBox deviceClass;
	private final DataStreamSelectionTable dataStreams;

	protected static Map<String, DeviceConfigEditorFrame> editorInstances = new HashMap<String, DeviceConfigEditorFrame>();

	public static synchronized void edit(final DeviceConfig deviceConfig) {
		String contextKey = deviceConfig.getId();
		if (!editorInstances.containsKey(contextKey)) {
			editorInstances.put(contextKey, new DeviceConfigEditorFrame());
		}
		editorInstances.get(contextKey).init(deviceConfig);
	}

	/**
	 * Creates new form DeviceConfigEditorPanel
	 */
	public DeviceConfigEditorFrame() {
		this.name = new JTextField();
		this.description = new JTextArea();
		this.deviceClass = new JComboBox();
		this.dataStreams = new DataStreamSelectionTable();

		addContextElement("Name", name);
		addContextElement("DeviceClass", deviceClass);
		addContextElement("DataStreams", dataStreams);
		addContextElement("Description", description);
		pack();

		this.deviceClass.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					loadDataStreams(getContext(), (String) deviceClass.getSelectedItem());
				} catch (NotAvailableException ex) {
					System.err.println("Could not update data streams!");
				}
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
//	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	@Override
	protected void load(final DeviceConfig context) {
		name.setText(context.getName());
		description.setText(context.getDescription());
		deviceClass.setModel(new DefaultComboBoxModel(deviceManager.getDeviceClassMap().keySet().toArray()));
		deviceClass.setSelectedItem(context.getDeviceClass());
		loadDataStreams(context, context.getDeviceClass());
	}

	private void loadDataStreams(final DeviceConfig context, String deviceClassID) {
		try {
			dataStreams.load(context.getDataStreams(), deviceManager.getDeviceClass(deviceClassID).getSupportedDataStreams());
		} catch (NotAvailableException ex) {
			dataStreams.load(context.getDataStreams(), new ArrayList());
		}
	}

	@Override
	protected void save(final DeviceConfig context) throws InvalidOperationException {
		context.setName(name.getText());
		context.setDescription(description.getText());
		context.setDeviceClass((String) deviceClass.getSelectedItem());
		context.setDataStreams(dataStreams.getDataStreamSelectionList());
		context.updateID();
		deviceManager.addDeviceConfig(context);
	}

	@Override
	protected boolean checkExistence(final DeviceConfig context) throws NotAvailableException {
		return deviceManager.getDeviceConfig(context.getId()) != null;

	}

	@Override
	protected void enableKeyContext(final boolean enabled) {
		name.setEnabled(enabled);
	}
}
