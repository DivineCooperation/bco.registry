/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.citec.csra.dm.view.struct;

import de.citec.csra.dm.DeviceManager;
import de.citec.csra.dm.exception.NotAvailableException;
import de.citec.csra.dm.tools.Manageable;
import de.citec.jps.core.JPService;
import de.citec.jps.properties.JPReadOnly;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

/**
 *
 * @author mpohling
 */
public abstract class AbstractOverviewPanel<T extends Manageable> extends javax.swing.JPanel {

	protected final DeviceManager deviceManager = DeviceManager.getInstance();
	protected List<T> contextList;

	/**
	 * Creates new form DeviceClassOverview
	 */
	public AbstractOverviewPanel() {
		initComponents();
		updateDynamicComponents();
		deviceManager.addPropertyChangeListener(new PropertyChangeListener() {

			public void propertyChange(PropertyChangeEvent evt) {
				if (evt.getPropertyName().equals(DeviceManager.DATA_UPDATE)) {
					updateDynamicComponents();
				}
			}
		});
		editButton.setEnabled(false);
		removeButton.setEnabled(false);
		contextTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
                    editButton.setEnabled(contextTable.getSelectedColumn() >= 0);
                    removeButton.setEnabled(contextTable.getSelectedColumn() >= 0 && !JPService.getAttribute(JPReadOnly.class).getValue());
			}
		});
        addButton.setEnabled(!JPService.getAttribute(JPReadOnly.class).getValue());
        removeButton.setEnabled(!JPService.getAttribute(JPReadOnly.class).getValue());
        if(JPService.getAttribute(JPReadOnly.class).getValue()) {
            editButton.setText("Show");
            readOnlyLabel.setText("Read Only Mode");
            readOnlyLabel.setForeground(Color.ORANGE.darker());
        }
	}

	protected final void updateDynamicComponents() {
		contextList = getContextList();
		contextTable.setModel(generateTableModel());
		contextTable.addColumnSelectionInterval(0, 0);
	}

	private TableModel generateTableModel() {
		String[] lables = getContextLables();
		Object[] contextData = new Object[lables.length];
		int contextCounter = contextList.size();

		Object[][] tableData = new Object[contextCounter][lables.length];
		T context;
		for (int i = 0; i < contextCounter; i++) {
			context = contextList.get(i);
			updateContextData(context, contextData);
			System.arraycopy(contextData, 0, tableData[i], 0, contextData.length);
		}
		return new javax.swing.table.DefaultTableModel(
				tableData,
				lables
		) {

			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}

		};
	}

	protected abstract List<T> getContextList();

	protected abstract String[] getContextLables();

	protected abstract T getSelection(JTable contextTable) throws NotAvailableException;

	protected abstract void updateContextData(T context, Object[] contextData);

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contextScrollPane = new javax.swing.JScrollPane();
        contextTable = new javax.swing.JTable();
        contextMenuPanel = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        readOnlyLabel = new javax.swing.JLabel();

        contextTable.setAutoCreateRowSorter(true);
        contextTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        contextTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        contextTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        contextTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                contextTableCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        contextTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                contextTableAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        contextTable.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                contextTableVetoableChange(evt);
            }
        });
        contextScrollPane.setViewportView(contextTable);

        contextMenuPanel.setBorder(null);

        editButton.setMnemonic('e');
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        addButton.setMnemonic('a');
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setMnemonic('r');
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        readOnlyLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        readOnlyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        readOnlyLabel.setToolTipText("");

        javax.swing.GroupLayout contextMenuPanelLayout = new javax.swing.GroupLayout(contextMenuPanel);
        contextMenuPanel.setLayout(contextMenuPanelLayout);
        contextMenuPanelLayout.setHorizontalGroup(
            contextMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contextMenuPanelLayout.createSequentialGroup()
                .addComponent(removeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readOnlyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        contextMenuPanelLayout.setVerticalGroup(
            contextMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contextMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(editButton)
                .addComponent(addButton)
                .addComponent(removeButton)
                .addComponent(readOnlyLabel))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(contextMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contextMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
		T selection = null;
		try {
			selection = getSelection(contextTable);
		} catch (NotAvailableException ex) {
			System.err.println("Could not remove selection! Content does not exist!");
			return;
		}

		if (JOptionPane.showConfirmDialog(this,
				"Do you realy want to delete " + selection.getId() + "?",
				"Confirm deletion",
				JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
			remove(selection);
		}
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
		try {                       
			edit(getSelection(contextTable));
		} catch (NotAvailableException ex) {
			System.err.println("Could not edit selection! Content does not exist!");
		}
    }//GEN-LAST:event_editButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
            add();
    }//GEN-LAST:event_addButtonActionPerformed

    private void contextTableVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_contextTableVetoableChange
    }//GEN-LAST:event_contextTableVetoableChange

    private void contextTableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_contextTableCaretPositionChanged
    }//GEN-LAST:event_contextTableCaretPositionChanged

    private void contextTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_contextTableAncestorAdded
    }//GEN-LAST:event_contextTableAncestorAdded

	protected abstract void remove(T type);

	protected abstract void edit(T type);

	protected abstract void add();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel contextMenuPanel;
    private javax.swing.JScrollPane contextScrollPane;
    private javax.swing.JTable contextTable;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel readOnlyLabel;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
