/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.citec.csra.dm.view.struct;

import de.citec.csra.dm.OldDeviceManager;
import de.citec.csra.dm.exception.InvalidOperationException;
import de.citec.csra.dm.exception.NotAvailableException;
import de.citec.csra.dm.tools.Manageable;
import de.citec.jps.core.JPService;
import de.citec.jp.JPReadOnly;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 *
 * @author mpohling
 */
public abstract class AbstractEditorFrame<T extends Manageable> extends javax.swing.JFrame implements ActionListener {

    public final static String ACTION_COMMAND_TIMER_END = "TimerEnd";
    public final static String ACTION_COMMAND_TIMER_START = "TimerStart";

    protected final OldDeviceManager deviceManager = OldDeviceManager.getInstance();
    private final JLabel typeLable;
    private int contextCounter;
    private T context;

    private Timer infoTimer;

    /**
     * Creates new form AbstractEditorPanel
     */
    public AbstractEditorFrame() {
        this.contextCounter = 0;
        this.initComponents();
        this.typeLable = new JLabel("");
        this.infoTimer = new Timer(3000, this);
        this.infoTimer.setActionCommand(ACTION_COMMAND_TIMER_END);
        this.typeLable.setPreferredSize(new Dimension(300, 20));

        this.addContextElement("Type", typeLable);

        if (JPService.getAttribute(JPReadOnly.class).getValue()) {
            confirmButton.setText("OK");
        }
    }

    protected final synchronized void addContextElement(String label, JComponent contextComponent) {
        GridBagConstraints gridBagConstraints;
        JLabel contextLabel = new JLabel(label);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = contextCounter;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        contextPanel.add(contextLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = contextCounter;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
//		contextComponent.setPreferredSize(new Dimension(300,-1));
//		Dimension d = contextComponent.getPreferredSize();
//		d.width = 300;
//		contextComponent.setPreferredSize(d);
        contextComponent.setMinimumSize(new Dimension(300, Integer.MAX_VALUE));
        contextPanel.add(contextComponent, gridBagConstraints);

        setAllEnabled(contextComponent, !JPService.getAttribute(JPReadOnly.class).getValue());
        contextCounter++;
    }

    private void setAllEnabled(final Component component, final boolean enable) {
        synchronized (component.getTreeLock()) {
            if (component instanceof Container) {
                Container componentAsContainer = (Container) component;
                for (Component c : componentAsContainer.getComponents()) {
                    setAllEnabled(c, enable);
                }
            }

            if (component instanceof JComponent) {
                Container componentAsJComponent = (JComponent) component;
                for (Component c : componentAsJComponent.getComponents()) {
                    setAllEnabled(c, enable);
                }
            }
            component.setEnabled(enable);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        contextPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        infoLabel = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();

        contextPanel.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(contextPanel);

        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        resetButton.setMnemonic('r');
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        cancelButton.setMnemonic('e');
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        confirmButton.setMnemonic('c');
        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelButton)
                        .addComponent(resetButton))
                    .addComponent(confirmButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        if (!JPService.getAttribute(JPReadOnly.class).getValue()) {
            try {
                save(context);
                setVisible(false);
                context = null;
                deviceManager.notifyDataUpdate();
            } catch (InvalidOperationException ex) {
                System.err.println("Could not save " + context + "! " + ex.getMessage());
                infoLabel.setText(ex.getMessage());
                actionPerformed(new ActionEvent(this, -1, ACTION_COMMAND_TIMER_START));
            }
        } else {
            setVisible(false);
            context = null;
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        load(context);
        setVisible(false);
        context = null;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        load(context);
    }//GEN-LAST:event_resetButtonActionPerformed

    protected void init(T context) {
        this.context = context;
        typeLable.setText(context.getClass().getSimpleName() + "[" + context.getId() + "]");
        try {
            enableKeyContext(!checkExistence(context));
        } catch (NotAvailableException ex) {
            enableKeyContext(true);
        }

        load(context);
        setVisible(true);
        pack();
        toFront();
    }

    public T getContext() throws NotAvailableException {
        if (context == null) {
            throw new NotAvailableException("Context");
        }
        return context;
    }

    @Override
    public synchronized void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals(ACTION_COMMAND_TIMER_START)) {
            infoTimer.restart();
            confirmButton.setForeground(Color.RED);
        } else if (e.getActionCommand().equals(ACTION_COMMAND_TIMER_END)) {
            infoTimer.stop();
            confirmButton.setForeground(Color.BLACK);
            infoLabel.setText("");
        }
    }

    protected abstract void load(T context);

    protected abstract void save(T context) throws InvalidOperationException;

    protected abstract boolean checkExistence(T context) throws NotAvailableException;

    protected abstract void enableKeyContext(final boolean enabled);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JPanel contextPanel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables
}
